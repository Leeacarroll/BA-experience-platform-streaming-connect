/*
 * Copyright 2019 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
*/

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
  }
}

plugins {
  id 'project-report'
  id 'java'
  id 'idea'
  id 'checkstyle'
  id 'jacoco'
  id 'org.sonarqube' version '2.6.2'
  id 'org.ajoberstar.grgit' version '2.2.1-rc.2'
}

description 'Adobe Experience Platform Streaming Connect'

repositories {
  jcenter()
}

subprojects {
  apply plugin: 'project-report'
  apply plugin: 'base'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.johnrengelman.shadow'
  apply plugin: 'java'
  apply plugin: 'maven-publish'
  apply plugin: 'idea'
  apply plugin: 'jacoco'

  version = System.getenv("PROJECT_VERSION") ?: "${versionMain}${versionQualifier}"

  checkstyle {
    configFile = '../config/checkstyle/checkstyle.xml' as File
    maxWarnings = 0
    toolVersion '8.10.1'
  }

  repositories {
    jcenter()

    publishing {
      repositories {
        maven {
          url "https://artifactory.corp.adobe.com/artifactory/maven-experienceplatform-release"
          credentials {
            username = "${param_artifactory_user}" == "" ? System.getenv("ARTIFACTORY_USER") : "${param_artifactory_user}"
            password = "${param_artifactory_api_token}" == "" ? System.getenv("ARTIFACTORY_API_TOKEN") : "${param_artifactory_api_token}"
          }
        }
      }

      publications {
        maven(MavenPublication) {
          groupId = 'com.adobe.platform.streaming'
          version = "${version}"
          from components.java
        }
      }
    }
  }

  compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.deprecation = true
  }

  compileTestJava {
    options.deprecation = true
  }

  task listAllDependencies(type: DependencyReportTask) {}

  tasks.withType(Test) {
    useJUnitPlatform()

    reports.html.enabled = false

    beforeTest { descriptor ->
      logger.lifecycle("Running test: " + descriptor)
    }
  }

  jacoco {
    toolVersion = "0.8.1"
  }

  jacocoTestReport {
    getAdditionalSourceDirs().setFrom(sourceSets.main.allSource.srcDirs)
    getSourceDirectories().setFrom(sourceSets.main.allSource.srcDirs)
    getClassDirectories().setFrom(sourceSets.main.output)

    reports {
      xml.enabled = true
      csv.enabled = false
      html.enabled = true
    }
  }

  test.onlyIf { !project.hasProperty('mySkipTests') }

  task unitTest(type: Test) {
    exclude '**/*IUTest.class'
  }

  task integrationTest(type: Test) {
    include '**/*IUTest.class'
  }
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = subprojects.test
  getAdditionalSourceDirs().setFrom(subprojects.sourceSets.main.allSource.srcDirs)
  getSourceDirectories().setFrom(subprojects.sourceSets.main.allSource.srcDirs)
  getClassDirectories().setFrom(subprojects.sourceSets.main.output)
  getExecutionData().setFrom(subprojects.jacocoTestReport.executionData)

  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }
  onlyIf = {
    true
  }
  doFirst {
    getExecutionData().setFrom(executionData.findAll {
      it.exists()
    })
  }
}

jar.enabled = false

ext {
  branchName = System.getenv("BRANCHNAME") ?: grgit.branch.current().getName()
}

sonarqube {
  properties {
    // Sonar server settings
    property 'sonar.host.url', 'http://mcdpv2.sonar.corp.adobe.com:9000/'
    property 'sonar.login', System.getenv('SONARQUBE_ACCESS_TOKEN')

    // project identity & general info
    property 'sonar.projectKey', "com.adobe.platform.streaming:experience-platform-streaming-connect:$branchName"
    property 'sonar.projectName', "Adobe Experience Platform Streaming Connect :: $branchName"
    property 'sonar.projectDescription', "Adobe Experience Platform Streaming Connect (branch: $branchName)"
    property 'sonar.links.homepage', 'https://git.corp.adobe.com/experience-platform/experience-platform-streaming-connect'
    property 'sonar.links.ci', 'https://pipeline.ci.corp.adobe.com/view/CICD/job/experience-platform-streaming-connect-pr-build'
    property 'sonar.links.issue', 'https://jira.corp.adobe.com/secure/RapidBoard.jspa?rapidView=23428&view=planning.nodetail'
    property 'sonar.links.scm', 'https://git.corp.adobe.com/experience-platform/experience-platform-streaming-connect'
    property 'sonar.java.coveragePlugin', 'jacoco'
    property 'sonar.jacoco.reportPaths', "$buildDir/jacoco/test.exec"
    property 'sonar.verbose', 'true'
    property 'sonar.sourceEncoding', 'UTF-8'
  }
}

configurations.all {
  exclude module: 'slf4j-log4j12'
}
